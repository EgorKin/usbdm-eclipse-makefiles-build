<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- can1_s32k14x.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="FlexCAN">

   <template><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>
   
   <xi:include href="_mapPinsOption.xml"/>
   
   <intOption name="NumberOfMessageBuffers" 
      description="Number of message buffers available"
      toolTip="This value is determined by the hardware"
      constant="true" 
      value="16" />

   <intOption name="NumberOfMessageFilters" 
      description="Number of message buffers available"
      toolTip="This value is determined by the hardware"
      constant="true" 
      value="40" />

   <template><![CDATA[
       \t//! Number of Message Buffers\n
       \tstatic constexpr unsigned NumberOfMessageBuffers =  $(NumberOfMessageBuffers);\n\n
       \t//! Number of Message Filters\n
       \tstatic constexpr unsigned NumberOfMessageFilters =  $(NumberOfMessageFilters);\n\n
   ]]></template>

   <!--
   Patterns for pattern and classHandler 
     -  %i replaced with peripheral instance e.g. FTM1 => 1, PTA => A
     -  %b replaced with peripheral base name e.g. FTM1 => = FTM
     -  %c replaced with peripheral C++ base class name e.g. FTM1 => = Ftm
     -  _IRQHandler is appended to the pattern (only)
   -->
   <irqOption name="oredIrqHandlingMethod"  
      description="ORed Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^%b%i_ORed$" 
      classHandler="%c%i::irqHandler" />

   <irqOption name="errorIrqHandlingMethod"  
      description="Error Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^%b%i_Error$" 
      classHandler="%c%i::errorIrqHandler" />

   <irqOption name="wakeupIrqHandlingMethod"  
      description="Wakeup Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^%b%i_WakeUp$" 
      classHandler="%c%i::wakeupIrqHandler" />

   <irqOption name="messagebufferIrqHandlingMethod"  
      description="Message Buffer Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^%b%i_MessageBuffer.*$" 
      classHandler="%c%i::messageBufferIrqHandler" />

   <signals/>
   
   
   <!-- Template is added to class within pin_mapping.h -->
   <template><![CDATA[
       \t//! Class based callback handler has been installed in vector table\n
       \tstatic constexpr bool irqHandlerInstalled = $(messagebufferIrqHandlingMethod);\n\n
       
       \tstatic constexpr unsigned OredIrqNumIndex                 = 0;
       \tstatic constexpr unsigned ErrorIrqNumIndex                = 1;
       \tstatic constexpr unsigned WakeupIrqNumIndex               = -1;
       \tstatic constexpr unsigned MessageBuffer_0_15_IrqNumIndex  = 2;
       \tstatic constexpr unsigned MessageBuffer_16_32_IrqNumIndex = 2;\n\n
   ]]></template>
       
   <intOption name="irqLevel" 
      description="IRQ Level in NVIC [0-15]"
      toolTip="Sets the priority level used to configure the NVIC\n
               Lower numbers represent higher priorities"
      value="8" min="0" max="15" 
   />
   
   <template><![CDATA[
      \t/**
      \t * Get Controller Host Interface input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getChiClockFrequency() {
      \t   return SystemCoreClock;
      \t}\n\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Get Protocol Engine input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getPeClockFrequency() {
      \t   if (can().CTRL1 & CAN_CTRL1_CLKSRC_MASK) {
      \t      return ScgInfo::getSoscDiv2Frequency();
      \t   }
      \t   else {
      \t      return SystemCoreClock;
      \t   }
      \t}\n\n
   ]]></template>

   <template><![CDATA[
       \t//! Default IRQ level\n
       \tstatic constexpr uint32_t irqLevel =  $(irqLevel);\n\n
   ]]></template>

   <xi:include href="_clockOption.xml"/>
      
   <projectActionList id = "can_files" >
      <copy source="Project_Headers/can.h"                    target="Project_Headers/can.h"                    overwrite="true"  derived="true" />
   </projectActionList>
   
</peripheralPage>
