<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE list SYSTEM "_menu.dtd" >
<!-- _common_settings.xml -->

<list name="CommonSettings" >
<binaryOption name="mapAllPins" 
   description="Map all allocated pins"
   toolTip="Map all allocated pins during startup using mapAllPins()">
   <choice value="false" name="Don't map - Use manual mapping or enable peripheral individually" />
   <choice value="true"  name="Map during startup" />
</binaryOption>

<!-- Template is added to pin_mapping.h -->
<template namespace="usbdm"><![CDATA[
   /* Template:_common_settings.xml */\n\n
   
\t/**
\t * @tparam  T  Type of comparison object (inferred)
\t * @param   a  Left-hand object for comparison
\t * @param   b  Right-hand object for comparison
\t *
\t * @return Smaller of a or b
\t */
\ttemplate<class T> 
\tconstexpr T min(const T a, const T b) {
\t   return (b < a) ? b : a;
\t}\n\n

\t/**
\t * @tparam  T  Type of comparison object (inferred)
\t * @param   a  Left-hand object for comparison
\t * @param   b  Right-hand object for comparison
\t *
\t * @return Larger of a or b
\t */
\ttemplate<class T> 
\tconstexpr T max(const T a, const T b) {
\t   return (b > a) ? b : a;
\t}\n\n

   #if defined(PCC)\n\n
   
   /** Dummy port information for pins without an associated PCR */
   constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, (IRQn_Type)-1};\n\n
   
   #if defined(PCC_PCC_PORTA_CGC_MASK)
   /** Port information for PORTA*/
   constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTA)), PORTA_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTB_CGC_MASK)
   /** Port information for PORTB*/
   constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTB)), PORTB_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTC_CGC_MASK)
   /** Port information for PORTC*/
   constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTC)), PORTC_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTD_CGC_MASK)
   /** Port information for PORTD*/
   constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTD)), PORTD_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTE_CGC_MASK)
   /** Port information for PORTE*/
   constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTE)), PORTE_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTF_CGC_MASK)
   /** Port information for PORTF*/
   constexpr PortInfo  __attribute__((unused)) PortFInfo {PORTF_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTF)), PORTF_IRQn};
   #endif\n\n
   
   #if defined(PCC_PCC_PORTG_CGC_MASK)
   /** Port information for PORTG*/
   constexpr PortInfo  __attribute__((unused)) PortGInfo {PORTG_BasePtr, (uint32_t)(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTG)), PORTG_IRQn};
   #endif\n\n
   
   #else // defined(PCC)
/** Dummy port information for pins without an associated PCR */
constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, (IRQn_Type)-1};\n\n

#ifdef SIM_SCGC5_PORTA_MASK
/** Port information for PORTA */
#ifndef PORTA_IRQS
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, ((IRQn_Type)-1)};
#else
constexpr IRQn_Type PORTA_IRQS_AR[] = PORTA_IRQS;
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, PORTA_IRQS_AR[0]};
#endif
#endif\n\n

#ifdef SIM_SCGC5_PORTB_MASK
/** Port information for PORTB */
#ifndef PORTB_IRQS
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, ((IRQn_Type)-1)};
#else
constexpr IRQn_Type PORTB_IRQS_AR[] = PORTB_IRQS;
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, PORTB_IRQS_AR[0]};
#endif
#endif\n\n

#ifdef SIM_SCGC5_PORTC_MASK
/** Port information for PORTC */
#ifndef PORTC_IRQS
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, ((IRQn_Type)-1)};
#else
constexpr IRQn_Type PORTC_IRQS_AR[] = PORTC_IRQS;
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, PORTC_IRQS_AR[0]};
#endif
#endif\n\n

#ifdef SIM_SCGC5_PORTD_MASK
/** Port information for PORTD */
#ifndef PORTD_IRQS
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, ((IRQn_Type)-1)};
#else
constexpr IRQn_Type PORTD_IRQS_AR[] = PORTD_IRQS;
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, PORTD_IRQS_AR[0]};
#endif
#endif\n\n

#ifdef SIM_SCGC5_PORTE_MASK
/** Port information for PORTE */
#ifndef PORTE_IRQS
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, ((IRQn_Type)-1)};
#else
constexpr IRQn_Type PORTE_IRQS_AR[] = PORTE_IRQS;
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, PORTE_IRQS_AR[0]};
#endif
#endif\n\n

   #endif // defined(PCC)\n\n

   /** Class to static check signal mapping is valid */
   template<class Info, int signalNum> class CheckSignal {
   \tstatic_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   \tstatic_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   \tstatic_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   \tstatic_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
   };\n\n
   
   /** Enables mapping of all allocated pins during startup using mapAllPins() */
   static constexpr bool MAP_ALL_PINS = $(mapAllPins);\n\n
   
   /** Used to configure pin-mapping before 1st use of peripherals */
   extern void mapAllPins();\n\n

   /* END Template:_common_settings.xml */\n\n
   
]]></template>

<!-- Convenient location for common file actions -->
<projectActionList id = "CommonSettings_files" >
   <copy source="Project_Headers/formatted_io.h"    target="Project_Headers/formatted_io.h"    overwrite="true"  derived="true" />
   <copy source="Project_Headers/stringFormatter.h" target="Project_Headers/stringFormatter.h" overwrite="true"  derived="true" />
</projectActionList>

</list>
