/*
 * @file spi.cpp  (180.ARM_Peripherals/Sources/spi-MKL_16bit.cpp)
 *
 *  Created on: 07/08/2012
 *      Author: podonoghue
 */
#include <stddef.h>
#include <stdint.h>
#include "system.h"
#include "derivative.h"
#include "utilities.h"
#include "hardware.h"
#include "spi.h"
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
namespace USBDM {

static const uint16_t spprFactors[] = {1,2,3,4,5,6,7,8};
static const uint16_t sprFactors[]  = {2,4,8,16,32,64,128,256,512};

/**
 * Sets Communication speed for SPI
 *
 * @param frequency => Frequency in Hz
 *
 * Note: Chooses the highest speed that is not greater than frequency.
 */
void Spi::setSpeed(uint32_t frequency=Spi0Info::speed) {

   int bestSPPR = 0;
   int bestSPR  = 0;
   int32_t bestDifference = 0x7FFFFFFF;
   for (int sppr = (sizeof(spprFactors)/sizeof(spprFactors[0]))-1; sppr >= 0; sppr--) {
      for (int spr = (sizeof(sprFactors)/sizeof(sprFactors[0]))-1; spr >= 0; spr--) {
         uint32_t calculatedFrequency = SystemBusClock/(spprFactors[sppr]*sprFactors[spr]);
         int32_t difference = frequency-calculatedFrequency;
         if (difference < 0) {
            // Too high stop looking here
            break;
         }
         if (difference < bestDifference) {
            // New "best value"
            bestDifference = difference;
            bestSPR  = spr;
            bestSPPR = sppr;
            interfaceFrequency = calculatedFrequency;
         }
      }
   }
   spi->BR = SPI_BR_SPPR(bestSPPR)|SPI_BR_SPR(bestSPR);
}

/**
 * Transmit and receive an 8-bit value over SPI
 *
 * @param data Data to send
 *
 * @return Data received
 */
uint32_t Spi::txRx(uint32_t data) {
   while ((spi->S & SPI_S_SPTEF_MASK)==0) {
      __asm__("nop");
   }
   spi->DL  = data;
   while ((spi->S & SPI_S_SPRF_MASK)==0) {
      __asm__("nop");
   }
   return spi->DL; // Return read data
}

/**
 *  Transmit and receive a series of bytes
 *
 *  @param dataSize  Number of bytes to transfer
 *  @param txData    Transmit bytes (may be NULL for Rx only)
 *  @param rxData    Receive byte buffer (may be NULL for Tx only)
 *
 *  Note: rxData may use same buffer as txData
 */
void Spi::txRxBytes(uint32_t dataSize, const uint8_t *txData, uint8_t *rxData) {
   uint8_t dummy = 0xFF;
   uint32_t rxDataInc  = DMA_DCR_DINC_MASK|DMA_DCR_ERQ_MASK|DMA_DCR_CS_MASK|DMA_DCR_SSIZE(1)|DMA_DCR_DSIZE(1)|DMA_DCR_D_REQ_MASK;
   uint32_t txDataInc = DMA_DCR_SINC_MASK|DMA_DCR_ERQ_MASK|DMA_DCR_CS_MASK|DMA_DCR_SSIZE(1)|DMA_DCR_DSIZE(1)|DMA_DCR_D_REQ_MASK;

   if (rxData == 0) {
      rxData = &dummy;
      rxDataInc &= ~DMA_DCR_DINC_MASK;
   }
   if (txData == 0) {
      txData = &dummy;
      txDataInc &= ~DMA_DCR_SINC_MASK;
   }
   // Optional Rx channel
   DmaChannel::DMAInformation dmaRxInformation = {
      (uint32_t)&spi->DL,
      (uint32_t)rxData,
      dataSize,
      rxDataInc,
      (uint8_t)dmaSpiRxSlot,
   };
   dmacRxChannel->configure(&dmaRxInformation);

   // Must have Tx channel
   DmaChannel::DMAInformation dmaTxInformation = {
      (uint32_t)txData,
      (uint32_t)&spi->DL,
      dataSize,
      txDataInc,
      (uint8_t)(dmaSpiRxSlot+1),
   };
   dmacTxChannel->configure(&dmaTxInformation);

   spi->C2 |= SPI_C2_RXDMAE_MASK|SPI_C2_TXDMAE_MASK;
   dmacTxChannel->wait();
   dmacRxChannel->wait();
   spi->C2 &= ~(SPI_C2_TXDMAE_MASK|SPI_C2_RXDMAE_MASK);
}

} // End namespace USBDM
