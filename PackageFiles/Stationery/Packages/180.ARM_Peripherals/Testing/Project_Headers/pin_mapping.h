/**
 * @file      pin_mapping.h (derived from MKV31F51212.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for FRDM_KV31F
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

namespace USBDM {

/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
#ifdef DEBUG_BUILD
   static_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
#endif
};

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Pins used for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED 
/**
 * Peripheral information for OSC, Crystal Oscillator
 */
class Osc0Info {
public:
   //! Hardware base pointer
   static constexpr volatile OSC_Type *osc   = (volatile OSC_Type *)OSC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:osc0_div

   //! Frequency of OSC Clock or Crystal
   static constexpr uint32_t oscclk_clock = 8000000UL;

   //! Frequency of 32K OSC Clock or Crystal (if applicable)
   static constexpr uint32_t osc32kclk_clock = 0UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      OSC_CR_ERCLKEN(1)  | // External Reference Enable
      OSC_CR_EREFSTEN(0) | // External Reference Stop Enable
      OSC_CR_SCP(2);       // Oscillator load capacitance

   //! OSC Clock divider register
   static constexpr uint32_t div =
      OSC_DIV_ERPS(0);   // ERCLK prescaler

   /**
    * Get OSC clock (internal, assumed available)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static constexpr uint32_t getInternalClock() {
      return oscclk_clock;
   }

   /**
    * Get OSCERCLK clock (external, masked by OSC_CR_ERCLKEN)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static uint32_t getOscerClock() {
      return (osc->CR&OSC_CR_ERCLKEN_MASK)?
         (getInternalClock()/(1<<((osc->DIV&OSC_DIV_ERPS_MASK)>>OSC_DIV_ERPS_SHIFT))):
         0;
   }

   /**
    * Get OSC32KCLK clock
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static uint32_t getOsc32kClock() {
      return osc32kclk_clock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: XTAL0                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EXTAL0               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End OSC_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Pins used for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED 
/**
 * Peripheral information for MCG, Multipurpose Clock Generator
 */
class McgInfo {
public:
   //! Hardware base pointer
   static constexpr volatile MCG_Type *mcg   = (volatile MCG_Type *)MCG_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTF_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {MCG_IRQn};

   // Template:mcg_mk_ics48m_no_rtc

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Not present on these devices
   static constexpr int ERRATA_E2448 = 0;

   enum ClockMode {
      ClockMode_None = -1,
      ClockMode_FEI  = 0,
      ClockMode_FEE,
      ClockMode_FBI,
      ClockMode_BLPI,
      ClockMode_FBE,
      ClockMode_BLPE,
      ClockMode_PBE,
      ClockMode_PEE,
   };

   //! Frequency of Internal 48MHz Clock
   static constexpr uint32_t irc48m_clock = 48000000UL;

   enum ModeFlags {
      Mode_LP  = (1<<0),
   };

   //! Frequency of Slow Internal Reference Clock [~32kHz]
   static constexpr uint32_t system_slow_irc_clock = 32768UL;

   //! Frequency of Fast Internal Reference Clock [~4MHz]
   static constexpr uint32_t system_fast_irc_clock = 4000000UL;

   //! PLL VDIV min value
   static constexpr uint32_t pll_vdiv_min = 24;

   //! PLL post divider
   static constexpr uint32_t pll_post_divider = 1;

   struct ClockInfo {
      //! Clock Mode
      const ClockMode clockMode:8;
      //! Mode flags
      const uint8_t modeFlags;
      //! Control Register 1
      const uint8_t c1;
      //! Control Register 2
      const uint8_t c2;
      //! Control Register 4
      const uint8_t c4;
      //! Control Register 5
      const uint8_t c5;
      //! Control Register 6
      const uint8_t c6;
      //! Status and Control Register
      const uint8_t sc;
      //! Control Register 7
      const uint8_t c7;
      //! Control Register 8
      const uint8_t c8;
   };

// Various clock configurations
   static const ClockInfo clockInfo[1];

   /**
    * Get MCGERCLK
    *
    * @return MCGERCLK as uint32_t
    */
   static uint32_t getErcClock() {
   
      switch((mcg->C7&MCG_C7_OSCSEL_MASK)) {
         default               : return 0;
         case MCG_C7_OSCSEL(0) : return Osc0Info::getInternalClock();
         case MCG_C7_OSCSEL(2) : return McgInfo::irc48m_clock;
      }
   }

   /**
    * Get Internal MCGIRCLK (ungated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getInternalIrcClock() {
         if (mcg->C2&MCG_C2_IRCS_MASK) {
   #ifdef MCG_SC_FCRDIV_MASK
            return (system_fast_irc_clock/(1<<((mcg->SC&MCG_SC_FCRDIV_MASK)>>MCG_SC_FCRDIV_SHIFT)));
   #else
            return system_fast_irc_clock;
   #endif
         }
         else {
            return system_slow_irc_clock;
         }
   }

   /**
    * Get MCGIRCLK (gated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getMcgIrClock() {
      if (mcg->C1&MCG_C1_IRCLKEN_MASK) {
         return getInternalIrcClock();
      }
      else {
         return 0;
      }
   }

};

/** 
 * End MCG_Group
 * @}
 */
/**
 * @addtogroup SIM_Group SIM, System Integration Module
 * @brief Pins used for System Integration Module
 * @{
 */
#define USBDM_SIM_IS_DEFINED 
/**
 * Peripheral information for SIM, System Integration Module
 */
class SimInfo {
public:
   //! Hardware base pointer
   static constexpr volatile SIM_Type *sim   = (volatile SIM_Type *)SIM_BasePtr;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:sim_mkv31f51212

   //! System Options Register 1
   static constexpr uint32_t sopt1 = 
      SIM_SOPT1_OSC32KSEL(3) |    // 32K oscillator clock select
      SIM_SOPT1_OSC32KOUT(0);     // 32K oscillator clock out pin select

   /**
    * Get ERCLK32K clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getErc32kClock() {
   
      switch(sim->SOPT1&SIM_SOPT1_OSC32KSEL_MASK) {
         default                     : return 0;
         case SIM_SOPT1_OSC32KSEL(0) : return Osc0Info::getOsc32kClock();
         case SIM_SOPT1_OSC32KSEL(3) : return 1000;
      }
   }

   //! System Options Register 2
   static constexpr uint32_t sopt2 = 
      SIM_SOPT2_LPUARTSRC(3) |     // LPUART clock source select
      SIM_SOPT2_PLLFLLSEL(1) |     // PLL/FLL clock select
      SIM_SOPT2_CLKOUTSEL(2);      // CLKOUT pin clock source select
   /**
    * Get Peripheral clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getPeripheralClock() {
      
      switch(sim->SOPT2&SIM_SOPT2_PLLFLLSEL_MASK) {
         default:                     return 0;
         case SIM_SOPT2_PLLFLLSEL(0): return SystemMcgFllClock;
         case SIM_SOPT2_PLLFLLSEL(1): return SystemMcgPllClock;
         case SIM_SOPT2_PLLFLLSEL(3): return McgInfo::irc48m_clock;
      }
   }

   /**
    * Get LPUART0 input clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getLpuart0InputClock() {
      
      switch(sim->SOPT2&SIM_SOPT2_LPUARTSRC_MASK) {
      default:
      case SIM_SOPT2_LPUARTSRC(0): return 0;
      case SIM_SOPT2_LPUARTSRC(1): return getPeripheralClock();
      case SIM_SOPT2_LPUARTSRC(2): return Osc0Info::getOscerClock();
      case SIM_SOPT2_LPUARTSRC(3): return McgInfo::getMcgIrClock();
      }
   }

   /**
    * Get LPUART0 clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getLpuart0Clock() {
      
      switch(sim->SOPT2&SIM_SOPT2_LPUARTSRC_MASK) {
      default:
      case SIM_SOPT2_LPUARTSRC(0): return 0;
      case SIM_SOPT2_LPUARTSRC(1): return getPeripheralClock();
      case SIM_SOPT2_LPUARTSRC(2): return Osc0Info::getOscerClock();
      case SIM_SOPT2_LPUARTSRC(3): return McgInfo::getMcgIrClock();
      }
   }

   //! System Options Register 4
   static constexpr uint32_t sopt4 = 
      SIM_SOPT4_FTM3TRG1SRC(1) |   // FlexTimer 3 Hardware Trigger 1 Source Select
      SIM_SOPT4_FTM3TRG0SRC(1) |   // FlexTimer 3 Hardware Trigger 0 Source Select
      SIM_SOPT4_FTM0TRG1SRC(0) |   // FlexTimer 0 Hardware Trigger 1 Source Select
      SIM_SOPT4_FTM0TRG0SRC(0) |   // FlexTimer 0 Hardware Trigger 0 Source Select
      SIM_SOPT4_FTM3CLKSEL(0)  |   // FlexTimer 3 External Clock Pin Select
      SIM_SOPT4_FTM2CLKSEL(0)  |   // FlexTimer 2 External Clock Pin Select
      SIM_SOPT4_FTM1CLKSEL(0)  |   // FlexTimer 1 External Clock Pin Select
      SIM_SOPT4_FTM0CLKSEL(0)  |   // FlexTimer 0 External Clock Pin Select
      SIM_SOPT4_FTM2CH1SRC(0)  |   // FTM2 channel 1 input capture source select
      SIM_SOPT4_FTM2CH0SRC(0)  |   // FTM2 channel 0 input capture source select
      SIM_SOPT4_FTM1CH0SRC(0)  |   // FTM1 channel 0 input capture source select
      SIM_SOPT4_FTM3FLT0(0)    |   // FlexTimer 3 Fault 0 Select
      SIM_SOPT4_FTM2FLT0(0)    |   // FlexTimer 2 Fault 0 Select
      SIM_SOPT4_FTM1FLT0(0)    |   // FlexTimer 1 Fault 0 Select
      SIM_SOPT4_FTM0FLT1(0)    |   // FlexTimer 0 Fault 1 Select
      SIM_SOPT4_FTM0FLT0(0);       // FlexTimer 0 Fault 0 Select

   //! System Options Register 5
   static constexpr uint32_t sopt5 = 
      SIM_SOPT5_UART0TXSRC(0) |      // UART 0 transmit data source select
      SIM_SOPT5_UART0RXSRC(0) |      // UART 0 receive data source select
      SIM_SOPT5_UART1TXSRC(0) |      // UART 1 transmit data source select
      SIM_SOPT5_UART1RXSRC(0) |      // UART 1 receive data source select
      SIM_SOPT5_LPUART0RXSRC(0); // LPUART 0 receive data source select

   //! System Options Register 7
   static constexpr uint32_t sopt7 = 
      SIM_SOPT7_ADC1ALTTRGEN(0) |    // ADC1 alternate trigger enable
      SIM_SOPT7_ADC1PRETRGSEL(0) |   // ADC1 pretrigger select
      SIM_SOPT7_ADC1TRGSEL(0) |      // ADC1 trigger select

      SIM_SOPT7_ADC0ALTTRGEN(0) |    // ADC0 alternate trigger enable
      SIM_SOPT7_ADC0PRETRGSEL(0) |   // ADC0 pretrigger select
      SIM_SOPT7_ADC0TRGSEL(0);       // ADC0 trigger select

   //! System Options Register 8
   static constexpr uint32_t sopt8 = 
      SIM_SOPT8_FTM3OCH7SRC(0) |   // FTM3 channel 7 output source
      SIM_SOPT8_FTM3OCH6SRC(0) |   // FTM3 channel 6 output source
      SIM_SOPT8_FTM3OCH5SRC(0) |   // FTM3 channel 5 output source
      SIM_SOPT8_FTM3OCH4SRC(0) |   // FTM3 channel 4 output source
      SIM_SOPT8_FTM3OCH3SRC(0) |   // FTM3 channel 3 output source
      SIM_SOPT8_FTM3OCH2SRC(0) |   // FTM3 channel 2 output source
      SIM_SOPT8_FTM3OCH1SRC(0) |   // FTM3 channel 1 output source
      SIM_SOPT8_FTM3OCH0SRC(3) |   // FTM3 channel 0 output source
      SIM_SOPT8_FTM0OCH7SRC(0) |   // FTM0 channel 7 output source
      SIM_SOPT8_FTM0OCH6SRC(0) |   // FTM0 channel 6 output source
      SIM_SOPT8_FTM0OCH5SRC(0) |   // FTM0 channel 5 output source
      SIM_SOPT8_FTM0OCH4SRC(0) |   // FTM0 channel 4 output source
      SIM_SOPT8_FTM0OCH3SRC(0) |   // FTM0 channel 3 output source
      SIM_SOPT8_FTM0OCH2SRC(0) |   // FTM0 channel 2 output source
      SIM_SOPT8_FTM0OCH1SRC(0) |   // FTM0 channel 1 output source
      SIM_SOPT8_FTM0OCH0SRC(0);    // FTM0 channel 0 output source

   //! System Clock Divider Register 1
   static constexpr uint32_t clkdiv1 = 
      SIM_CLKDIV1_OUTDIV4(2)|  // Flash clock
      SIM_CLKDIV1_OUTDIV3(2)|  // FlexBus clock
      SIM_CLKDIV1_OUTDIV2(1)|  // Bus clock
      SIM_CLKDIV1_OUTDIV1(0);  // Core/system clock 

   /**
    * Initialise SIM registers
    */
   static void initRegs() {
      
      sim->SOPT1 = sopt1;
      sim->SOPT2 = sopt2;
      sim->SOPT4 = sopt4;
      sim->SOPT5 = sopt5;
      sim->SOPT7 = sopt7;
      sim->SOPT8 = sopt8;
   
      sim->CLKDIV1 = clkdiv1;
   }
};

/** 
 * End SIM_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Pins used for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc0Info {
public:
   //! Hardware base pointer
   static constexpr volatile ADC_Type *adc   = (volatile ADC_Type *)ADC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC0_IRQn};

   // Template:adc0_diff_a

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(3)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ACREN(0b000)|
       ADC_SC2_ADTRG(0);

   //! Number of signals available in info table
   static constexpr int numSignals  = 40;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC0_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC0_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: ADC0_SE12            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: ADC0_SE13            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: ADC0_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  17: ADC0_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC0_SE18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC0_SE23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: ADC0_SE4a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: ADC0_SE5a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: ADC0_SE6a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  39: ADC0_SE7a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DP0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC0_DP1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: ADC0_DP2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: ADC0_DP3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC0_DM0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC0_DM1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: ADC0_DM2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: ADC0_DM3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_ADC1_IS_DEFINED 
/**
 * Peripheral information for ADC, Analogue Input
 */
class Adc1Info {
public:
   //! Hardware base pointer
   static constexpr volatile ADC_Type *adc   = (volatile ADC_Type *)ADC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_ADC1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {ADC1_IRQn};

   // Template:adc0_diff_a

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(3)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ACREN(0b000)|
       ADC_SC2_ADTRG(0);

   //! Number of signals available in info table
   static constexpr int numSignals  = 40;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: ADC1_SE4b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: ADC1_SE5b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: ADC1_SE6b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: ADC1_SE7b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: ADC1_SE8             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: ADC1_SE9             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  12: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  13: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  14: ADC1_SE14            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: ADC1_SE15            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  17: ADC1_SE17            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: ADC1_SE18            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  20: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  21: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  22: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  23: ADC1_SE23            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  26: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  31: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  32: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  33: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  34: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  35: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  36: ADC1_SE4a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: ADC1_SE5a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: ADC1_SE6a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  39: ADC1_SE7a            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DP0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC1_DP1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC1_DP3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: ADC1_DM0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: ADC1_DM1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
            /*   3: ADC1_DM3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End ADC_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Pins used for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp0Info {
public:
   //! Hardware base pointer
   static constexpr volatile CMP_Type *cmp   = (volatile CMP_Type *)CMP0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_CMP_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {CMP0_IRQn};

   // Template:cmp0_mkv

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable
   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
      CMP_SCR_DMAEN(0) | // DMA Enable Control
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! CMP Status and Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP0_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: CMP0_IN2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: CMP0_IN3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: CMP0_IN4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: CMP0_IN5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP0_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP1_IS_DEFINED 
/**
 * Peripheral information for CMP, Analogue Comparator
 */
class Cmp1Info {
public:
   //! Hardware base pointer
   static constexpr volatile CMP_Type *cmp   = (volatile CMP_Type *)CMP1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:cmp0_mkv

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable
   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
      CMP_SCR_DMAEN(0) | // DMA Enable Control
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! CMP Status and Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: CMP1_IN0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: CMP1_IN1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   3: CMP1_IN3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   5: CMP1_IN5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   8: CMP1_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End CMP_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Pins used for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED 
/**
 * Peripheral information for CONTROL, Control
 */
class ControlInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 12;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: RESET_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: JTAG_TCLK            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SWD_CLK              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: JTAG_TDI             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: JTAG_TDO             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: TRACE_SWO            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: JTAG_TMS             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SWD_DIO              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: NMI_b                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: JTAG_TRST_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: CLKOUT               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: CLKOUT32K            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End Control_Group
 * @}
 */
/**
 * @addtogroup CRC_TODO_Group CRC, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_CRC_IS_DEFINED 
/**
 * Peripheral information for CRC, (Incomplete)
 */
class CrcInfo {
public:
   //! Hardware base pointer
   static constexpr volatile CRC_Type *crc   = (volatile CRC_Type *)CRC_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_CRC_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End CRC_TODO_Group
 * @}
 */
/**
 * @addtogroup CONSOLE_Group Console, Console
 * @brief Pins used for Console
 * @{
 */
/** 
 * End CONSOLE_Group
 * @}
 */
/**
 * @addtogroup DAC_Group DAC, Digital-to-Analogue Converter
 * @brief Pins used for Digital-to-Analogue Converter
 * @{
 */
#define USBDM_DAC0_IS_DEFINED 
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter
 */
class Dac0Info {
public:
   //! Hardware base pointer
   static constexpr volatile DAC_Type *dac   = (volatile DAC_Type *)DAC0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC0_IRQn};

   // Template:dac0_16ch_fifo16

   //! DAC Control Register 0
   static constexpr uint32_t c0 =
      DAC_C0_DACRFS(1)        | // Reference Select
      DAC_C0_DACTRGSEL(1)     | // Trigger Select
      DAC_C0_LPEN(0)          | // Low Power Control
      DAC_C0_DACBWIEN(0)      | // Buffer Watermark Interrupt Enable
      DAC_C0_DACBTIEN(0)      | // Buffer Read Pointer Top Flag Interrupt Enable
      DAC_C0_DACBBIEN(0);       // Buffer Read Pointer Bottom Flag Interrupt Enable

   //! DAC Control Register 1
   static constexpr uint32_t c1 =
      DAC_C1_DMAEN(0)       | // DMA Enable Select
      DAC_C1_DACBFWM(0)     | // Buffer Watermark Select
      DAC_C1_DACBFMD(0)     | // Buffer Work Mode Select
      DAC_C1_DACBFEN(0);      // Buffer Enable
   //! DAC Control Register 2
   static constexpr uint32_t c2 =
      DAC_C2_DACBFUP(1);   // DAC Buffer Upper Limit
   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: DAC0_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_DAC1_IS_DEFINED 
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter
 */
class Dac1Info {
public:
   //! Hardware base pointer
   static constexpr volatile DAC_Type *dac   = (volatile DAC_Type *)DAC1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DAC1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {DAC1_IRQn};

   // Template:dac0_16ch_fifo16

   //! DAC Control Register 0
   static constexpr uint32_t c0 =
      DAC_C0_DACRFS(1)        | // Reference Select
      DAC_C0_DACTRGSEL(1)     | // Trigger Select
      DAC_C0_LPEN(0)          | // Low Power Control
      DAC_C0_DACBWIEN(0)      | // Buffer Watermark Interrupt Enable
      DAC_C0_DACBTIEN(0)      | // Buffer Read Pointer Top Flag Interrupt Enable
      DAC_C0_DACBBIEN(0);       // Buffer Read Pointer Bottom Flag Interrupt Enable

   //! DAC Control Register 1
   static constexpr uint32_t c1 =
      DAC_C1_DMAEN(0)       | // DMA Enable Select
      DAC_C1_DACBFWM(0)     | // Buffer Watermark Select
      DAC_C1_DACBFMD(0)     | // Buffer Work Mode Select
      DAC_C1_DACBFEN(0);      // Buffer Enable
   //! DAC Control Register 2
   static constexpr uint32_t c2 =
      DAC_C2_DACBFUP(1);   // DAC Buffer Upper Limit
   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: DAC1_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End DAC_Group
 * @}
 */
/**
 * @addtogroup DMA_TODO_Group DMA, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED 
/**
 * Peripheral information for DMA, (Incomplete)
 */
class Dma0Info {
public:
   //! Hardware base pointer
   static constexpr volatile DMA_Type *dma   = (volatile DMA_Type *)DMA0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC7_DMA_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC7));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End DMA_TODO_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Pins used for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED 
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA)
 */
class Dmamux0Info {
public:
   //! Hardware base pointer
   static constexpr volatile DMAMUX_Type *dmamux   = (volatile DMAMUX_Type *)DMAMUX0_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_DMAMUX0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   /* DMA channel numbers */
   enum DmaChannels {
      DMA0_SLOT_Disabled                            = 0,
      DMA0_SLOT_UART0_Receive                       = 2,
      DMA0_SLOT_UART0_Transmit                      = 3,
      DMA0_SLOT_UART1_Receive                       = 4,
      DMA0_SLOT_UART1_Transmit                      = 5,
      DMA0_SLOT_UART2_Receive                       = 6,
      DMA0_SLOT_UART2_Transmit                      = 7,
      DMA0_SLOT_SPI0_Receive                        = 14,
      DMA0_SLOT_SPI0_Transmit                       = 15,
      DMA0_SLOT_SPI1_RxTx                           = 16,
      DMA0_SLOT_I2C0                                = 22,
      DMA0_SLOT_FTM0_Ch_0                           = 20,
      DMA0_SLOT_FTM0_Ch_1                           = 21,
      DMA0_SLOT_FTM0_Ch_2                           = 22,
      DMA0_SLOT_FTM0_Ch_3                           = 23,
      DMA0_SLOT_FTM0_Ch_4                           = 24,
      DMA0_SLOT_FTM0_Ch_5                           = 25,
      DMA0_SLOT_FTM0_Ch_6                           = 26,
      DMA0_SLOT_FTM0_Ch_7                           = 27,
      DMA0_SLOT_FTM1_Ch_0                           = 28,
      DMA0_SLOT_FTM1_Ch_1                           = 29,
      DMA0_SLOT_FTM2_Ch_0                           = 30,
      DMA0_SLOT_FTM2_Ch_1                           = 31,
      DMA0_SLOT_FTM3_Ch_0                           = 32,
      DMA0_SLOT_FTM3_Ch_1                           = 33,
      DMA0_SLOT_FTM3_Ch_2                           = 34,
      DMA0_SLOT_FTM3_Ch_3                           = 35,
      DMA0_SLOT_FTM3_Ch_4                           = 36,
      DMA0_SLOT_FTM3_Ch_5                           = 37,
      DMA0_SLOT_FTM3_Ch_6                           = 38,
      DMA0_SLOT_FTM3_Ch_7                           = 39,
      DMA0_SLOT_ADC0                                = 40,
      DMA0_SLOT_ADC1                                = 40,
      DMA0_SLOT_CMP0                                = 42,
      DMA0_SLOT_CMP1                                = 43,
      DMA0_SLOT_DAC0                                = 45,
      DMA0_SLOT_DAC1                                = 46,
      DMA0_SLOT_PDB                                 = 48,
      DMA0_SLOT_PortA                               = 49,
      DMA0_SLOT_PortB                               = 50,
      DMA0_SLOT_PortC                               = 51,
      DMA0_SLOT_PortD                               = 52,
      DMA0_SLOT_PortE                               = 53,
      DMA0_SLOT_LPUART0_Receive                     = 58,
      DMA0_SLOT_LPUART0_Transmit                    = 59,
      DMA0_SLOT_AlwaysEnabled0                      = 60,
      DMA0_SLOT_AlwaysEnabled1                      = 61,
      DMA0_SLOT_AlwaysEnabled2                      = 62,
      DMA0_SLOT_AlwaysEnabled3                      = 63,
   };
};

/** 
 * End DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EWM_Group EWM, External Watchdog Monitor
 * @brief Pins used for External Watchdog Monitor
 * @{
 */
#define USBDM_EWM_IS_DEFINED 
/**
 * Peripheral information for EWM, External Watchdog Monitor
 */
class EwmInfo {
public:
   //! Hardware base pointer
   static constexpr volatile EWM_Type *ewm   = (volatile EWM_Type *)EWM_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_EWM_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: EWM_IN               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: EWM_OUT_b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End EWM_Group
 * @}
 */
/**
 * @addtogroup FB_Group FB, Flexbus
 * @brief Pins used for Flexbus
 * @{
 */
#define USBDM_FB_IS_DEFINED  
/**
 * Peripheral information for FB, Flexbus
 */
class FbInfo {
public:
   //! Hardware base pointer
   static constexpr volatile FB_Type *fb   = (volatile FB_Type *)FB_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 82;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FB_CS0_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FB_CS1_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FB_CS2_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   4: FB_CS4_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FB_CS5_b             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FB_AD0               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FB_AD1               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: FB_AD2               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: FB_AD3               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: FB_AD4               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: FB_AD5               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: FB_AD6               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: FB_AD7               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: FB_AD8               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: FB_AD9               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: FB_AD10              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: FB_AD11              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  18: FB_AD12              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  19: FB_AD13              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  20: FB_AD14              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  21: FB_AD15              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  22: FB_AD16              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  23: FB_AD17              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  24: FB_AD18              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  25: FB_AD19              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  26: FB_AD20              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  27: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  28: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  29: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  30: FB_AD24              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  31: FB_AD25              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  32: FB_AD26              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  33: FB_AD27              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  34: FB_AD28              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  35: FB_AD29              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  36: FB_AD30              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  37: FB_AD31              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  38: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  39: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  40: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  41: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  42: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  43: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  44: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  45: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  46: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  47: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  48: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  49: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  50: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  51: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  52: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  53: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  54: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  55: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  56: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  57: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  58: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  59: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  60: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  61: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  62: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  63: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  64: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  65: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  66: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  67: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  68: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  69: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  70: FB_TSIZ0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  71: FB_TSIZ1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  72: FB_ALE               = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  73: FB_OE_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  74: FB_RW_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  75: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  76: FB_TBST_b            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  77: FB_TS_b              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  78: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*  79: FB_BE15_8_BLS23_16_b = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  80: FB_BE23_16_BLS15_8_b = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  81: FB_BE31_24_BLS7_0_b  = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End FB_Group
 * @}
 */
/**
 * @addtogroup FLEXBUS_Group FLEXBUS, Unknown
 * @brief Pins used for Unknown
 * @{
 */
/** 
 * End FLEXBUS_Group
 * @}
 */
/**
 * @addtogroup FTFA_TODO_Group FTFA, (Incomplete)
 * @brief Pins used for (Incomplete)
 * @{
 */
#define USBDM_FTFA_IS_DEFINED 
/**
 * Peripheral information for FTFA, (Incomplete)
 */
class FtfaInfo {
public:
   //! Hardware base pointer
   static constexpr volatile FTFA_Type *ftfa   = (volatile FTFA_Type *)FTFA_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTFA_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

};

/** 
 * End FTFA_TODO_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, Shared Resources
 * @brief Pins used for Shared Resources
 * @{
 */
#define USBDM_FTM_IS_DEFINED 
/**
 * Peripheral information for FTM, Shared Resources
 */
class FtmInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM_CLKIN0           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM_CLKIN1           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_FTM0_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm0Info {
public:
   //! Hardware base pointer
   static constexpr volatile FTM_Type *ftm   = (volatile FTM_Type *)FTM0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM0_IRQn};

   // Template:ftm0_8ch_icrst

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Period
   static constexpr uint32_t period = 10000;

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint32_t minimumResolution=100;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM0_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM0_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FTM0_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FTM0_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FTM0_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FTM0_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FTM0_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FTM0_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM0_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM0_FLT1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   2: FTM0_FLT2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   3: FTM0_FLT3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM1_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm1Info {
public:
   //! Hardware base pointer
   static constexpr volatile FTM_Type *ftm   = (volatile FTM_Type *)FTM1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM1_IRQn};

   // Template:ftm1_2ch_icrst

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Period
   static constexpr uint32_t period = 10000;

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint32_t minimumResolution=100;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM1_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM1_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM1_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM1_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM2_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm2Info {
public:
   //! Hardware base pointer
   static constexpr volatile FTM_Type *ftm   = (volatile FTM_Type *)FTM2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM2_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM2_IRQn};

   // Template:ftm1_2ch_icrst

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Period
   static constexpr uint32_t period = 10000;

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint32_t minimumResolution=100;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM2_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM2_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM2_QD_PHA          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
            /*   1: FTM2_QD_PHB          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM3_IS_DEFINED 
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare
 */
class Ftm3Info {
public:
   //! Hardware base pointer
   static constexpr volatile FTM_Type *ftm   = (volatile FTM_Type *)FTM3_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_FTM3_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {FTM3_IRQn};

   // Template:ftm0_8ch_icrst

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Period
   static constexpr uint32_t period = 10000;

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint32_t minimumResolution=100;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm->SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      return freq/(1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: FTM3_CH0             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: FTM3_CH1             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: FTM3_CH2             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: FTM3_CH3             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: FTM3_CH4             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: FTM3_CH5             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: FTM3_CH6             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: FTM3_CH7             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PcrInfo  info[] = {
   
            //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
            /*   0: FTM3_FLT0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Pins used for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioAInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTA_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOA_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t defaultPcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTA_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTA_IRQn};

   // Template:gpioa_0x400ff000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

#define USBDM_GPIOB_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioBInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTB_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOB_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t defaultPcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTB_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTB_IRQn};

   // Template:gpioa_0x400ff000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

#define USBDM_GPIOC_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioCInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTC_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOC_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t defaultPcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTC_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTC_IRQn};

   // Template:gpioa_0x400ff000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

#define USBDM_GPIOD_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioDInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTD_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOD_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t defaultPcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTD_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTD_IRQn};

   // Template:gpioa_0x400ff000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

#define USBDM_GPIOE_IS_DEFINED 
/**
 * Peripheral information for GPIO, Digital Input/Output
 */
class GpioEInfo {
public:
   //! PORT Hardware base pointer
   static constexpr uint32_t pcrAddress   = PORTE_BasePtr;

   //! GPIO Hardware base pointer
   static constexpr uint32_t gpioAddress   = GPIOE_BasePtr;

   //! Value for PCR (including MUX value)
   static constexpr uint32_t defaultPcrValue  = GPIO_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_PORTE_MASK;

   //! Address of clock register for peripheral
   static constexpr uint32_t clockReg  = SIM_BasePtr+offsetof(SIM_Type,SCGC5);

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PORTE_IRQn};

   // Template:gpioa_0x400ff000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

};

/** 
 * End GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Pins used for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c0Info {
public:
   //! Hardware base pointer
   static constexpr volatile I2C_Type *i2c   = (volatile I2C_Type *)I2C0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C0_IRQn};

   // Template:i2c0_f12

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C0_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C0_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_I2C1_IS_DEFINED 
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface
 */
class I2c1Info {
public:
   //! Hardware base pointer
   static constexpr volatile I2C_Type *i2c   = (volatile I2C_Type *)I2C1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_I2C1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {I2C1_IRQn};

   // Template:i2c0_f12

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: I2C1_SCL             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: I2C1_SDA             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End I2C_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Pins used for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED 
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit
 */
class LlwuInfo {
public:
   //! Hardware base pointer
   static constexpr volatile LLWU_Type *llwu   = (volatile LLWU_Type *)LLWU_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LLWU_IRQn};

   // Template:llwu_pe3_filt2

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   // LLWU Pin Enable registers
   static constexpr uint8_t pe1 = 0;
   static constexpr uint8_t pe2 = 0; 
   static constexpr uint8_t pe3 = 0;

   // Module wake ups
   static constexpr uint8_t me =  
      LLWU_ME_WUME0(0) |  // LPTMR
      LLWU_ME_WUME1(0) |  // CMP0
      LLWU_ME_WUME2(0) |  // CMP1
      LLWU_ME_WUME3(0) |  // CMP2/3 (if present)
      LLWU_ME_WUME4(0) |  // TSI0 (if present)
      LLWU_ME_WUME5(0) |  // RTC Alarm
      LLWU_ME_WUME6(0) |  //
      LLWU_ME_WUME7(0);   // RTC Seconds

   // Pin Filter 1 register
   static constexpr uint8_t filt1 = 
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // Pin Filter 2 register
   static constexpr uint8_t filt2 =
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LLWU_P0              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LLWU_P1              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LLWU_P2              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LLWU_P3              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: LLWU_P4              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: LLWU_P5              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: LLWU_P6              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: LLWU_P7              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9              = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: LLWU_P10             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: LLWU_P11             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: LLWU_P12             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: LLWU_P13             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: LLWU_P14             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Pins used for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED 
/**
 * Peripheral information for LPTMR, Low Power Timer
 */
class Lptmr0Info {
public:
   //! Hardware base pointer
   static constexpr volatile LPTMR_Type *lptmr   = (volatile LPTMR_Type *)LPTMR0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC5_LPTMR_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC5));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPTMR0_IRQn};

   // Template:lptmr0_0

   //! Default Timer Compare value
   static constexpr uint32_t cmr = 0;

   //! Default PSR value
   static constexpr uint32_t psr = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PBYP(0)|
      LPTMR_PSR_PCS(0);

   //! Default CSR value
   static constexpr uint32_t csr = 
      LPTMR_CSR_TIE(0)|
      LPTMR_CSR_TMS(0)|
      LPTMR_CSR_TFC(0)|
      LPTMR_CSR_TPP(0)|
      LPTMR_CSR_TPS(0);

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(lptmr->PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): return McgInfo::getMcgIrClock();
      case LPTMR_PSR_PCS(1): return SystemLpoClock;
      case LPTMR_PSR_PCS(2): return SimInfo::getErc32kClock();
      case LPTMR_PSR_PCS(3): return Osc0Info::getOscerClock();
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: --                   = --                             */  { 0, 0, 0, INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LPTMR0_ALT3          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPTMR_Group
 * @}
 */
/**
 * @addtogroup LPUART_Group LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Low Power Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_LPUART0_IS_DEFINED 
/**
 * Peripheral information for LPUART, Low Power Universal Asynchronous Receiver/Transmitter
 */
class Lpuart0Info {
public:
   //! Hardware base pointer
   static constexpr volatile LPUART_Type *lpuart   = (volatile LPUART_Type *)LPUART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_LPUART0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {LPUART0_RX_TX_IRQn};

   // Template:lpuart0_0x4002a000

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint32_t defaultBaudRate = 115200;

   /**
    * Get clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getClockFrequency() {
      return SimInfo::getLpuart0Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: LPUART0_TX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: LPUART0_RX           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: LPUART0_RTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: LPUART0_CTS_b        = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End LPUART_Group
 * @}
 */
/**
 * @addtogroup PDB_Group PDB, Programmable Dely Block
 * @brief Pins used for Programmable Dely Block
 * @{
 */
#define USBDM_PDB0_IS_DEFINED 
/**
 * Peripheral information for PDB, Programmable Dely Block
 */
class Pdb0Info {
public:
   //! Hardware base pointer
   static constexpr volatile PDB_Type *pdb   = (volatile PDB_Type *)PDB0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PDB_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PDB0_IRQn};

   // Template:pdb0_2ch_2trig_2dac_2po

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: PDB0_EXTRG           = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End PDB_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Pins used for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED 
/**
 * Peripheral information for PIT, Programmable Interrupt Timer
 */
class PitInfo {
public:
   //! Hardware base pointer
   static constexpr volatile PIT_Type *pit   = (volatile PIT_Type *)PIT_BasePtr;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_PIT_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 4;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {PIT0_IRQn, PIT1_IRQn, PIT2_IRQn, PIT3_IRQn};

   // Template:pit_4ch_chain

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr uint16_t pit_ldval = 10000;

   /**
    * Get clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default value for PIT->SC register
   static constexpr uint32_t loadValue  = 
      10000;

   //! PIT operation in debug mode
   static constexpr uint32_t mcr = 
      PIT_MCR_FRZ(0);

};

/** 
 * End PIT_Group
 * @}
 */
/**
 * @addtogroup Power_Group POWER, Power
 * @brief Pins used for Power
 * @{
 */
#define USBDM_POWER_IS_DEFINED 
/**
 * Peripheral information for POWER, Power
 */
class PowerInfo {
public:
   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Number of signals available in info table
   static constexpr int numSignals  = 18;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: VDD1                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: VDD2                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: VDD3                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: VDD4                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: VDD5                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: VDD6                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: VDD7                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: VDDA                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: VREFH                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   9: VREFL                = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  10: VSS1                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  11: VSS2                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  12: VSS3                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  13: VSS4                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  14: VSS5                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  15: VSS6                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  16: VSS7                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*  17: VSSA                 = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End Power_Group
 * @}
 */
/**
 * @addtogroup SMC_Group SMC, System Mode Controller
 * @brief Pins used for System Mode Controller
 * @{
 */
#define USBDM_SMC_IS_DEFINED 
/**
 * Peripheral information for SMC, System Mode Controller
 */
class SmcInfo {
public:
   //! Hardware base pointer
   static constexpr volatile SMC_Type *smc   = (volatile SMC_Type *)SMC_BasePtr;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:smc_mk22f51212

#ifndef SMC_PMPROT_AHSRUN
#define SMC_PMPROT_AHSRUN(x) 0
#endif

   // Power Mode Protection Register
   static constexpr uint8_t pmprot =  
      SMC_PMPROT_AHSRUN(0) |  // Allow High Speed Run mode
      SMC_PMPROT_AVLP(0) |  // Allow very low power modes
      SMC_PMPROT_ALLS(0) |  // Allow low leakage stop mode
      SMC_PMPROT_AVLLS(0);  // Allow very low leakage stop mode

#ifndef SMC_PMCTRL_LPWUI
#define SMC_PMCTRL_LPWUI(x) 0
#endif

   // Power Mode Control Register
   static constexpr uint8_t pmctrl =  
      SMC_PMCTRL_LPWUI(0);   // Low Power Wake Up on Interrupt

#ifndef SMC_STOPCTRL_PSTOPO
#define SMC_STOPCTRL_PSTOPO(x) 0
#endif

#ifndef SMC_STOPCTRL_LPOPO
#define SMC_STOPCTRL_LPOPO(x) 0
#endif

#ifndef SMC_STOPCTRL_RAM2PO
#define SMC_STOPCTRL_RAM2PO(x) 0
#endif
   // VLLS Control Register
   static constexpr uint8_t stopctrl =  
      SMC_STOPCTRL_PSTOPO(0) |  // Partial Stop Option (if present)
      SMC_STOPCTRL_PORPO(0) |  // POR Power Option
      SMC_STOPCTRL_LPOPO(0) |  // POR Power Option (if present)
      SMC_STOPCTRL_RAM2PO(0) |  // RAM2 Power Option (if present)
      SMC_STOPCTRL_LLSM(0);   // LLS or VLLS Mode Control

};

/** 
 * End SMC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Pins used for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi0Info {
public:
   //! Hardware base pointer
   static constexpr volatile SPI_Type *spi   = (volatile SPI_Type *)SPI0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI0_IRQn};

   // Template:spi0_mk_pcsis6

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = 
      SPI_CTAR_LSBFE(0)| // LSB or MSB first
      SPI_CTAR_MODE(0);  // Mode (CPOL+CPHA)

#endif

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI0_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI0_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI0_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI0_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI0_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI0_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI0_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   7: SPI0_PCS4            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   8: SPI0_PCS5            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI1_IS_DEFINED 
/**
 * Peripheral information for SPI, Serial Peripheral Interface
 */
class Spi1Info {
public:
   //! Hardware base pointer
   static constexpr volatile SPI_Type *spi   = (volatile SPI_Type *)SPI1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC6_SPI1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC6));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {SPI1_IRQn};

   // Template:spi0_mk_pcsis6

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

#ifdef SPI_CTAR_LSBFE_SHIFT
   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint32_t modeValue = 
      SPI_CTAR_LSBFE(0)| // LSB or MSB first
      SPI_CTAR_MODE(0);  // Mode (CPOL+CPHA)

#endif

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 7;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: SPI1_SCK             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: SPI1_SIN             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: SPI1_SOUT            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: SPI1_PCS0            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   4: SPI1_PCS1            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   5: SPI1_PCS2            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   6: SPI1_PCS3            = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End SPI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Pins used for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart0Info {
public:
   //! Hardware base pointer
   static constexpr volatile UART_Type *uart   = (volatile UART_Type *)UART0_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART0_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART0_RX_TX_IRQn};

   // Template:uart0_mk21fa12_c7816

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr bool statusNeedsWrite = false;

   static constexpr uint32_t defaultBaudRate = 115200;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemCoreClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART0_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART0_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART0_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART0_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART1_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart1Info {
public:
   //! Hardware base pointer
   static constexpr volatile UART_Type *uart   = (volatile UART_Type *)UART1_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART1_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART1_RX_TX_IRQn};

   // Template:uart1_mk10d10

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr bool statusNeedsWrite = false;

   static constexpr uint32_t defaultBaudRate = 115200;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemCoreClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART1_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART1_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART1_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART1_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED 
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter
 */
class Uart2Info {
public:
   //! Hardware base pointer
   static constexpr volatile UART_Type *uart   = (volatile UART_Type *)UART2_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_UART2_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 1;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = {UART2_RX_TX_IRQn};

   // Template:uart1_mk10d10

   //! Callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = false;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  0;

   static constexpr bool statusNeedsWrite = false;

   static constexpr uint32_t defaultBaudRate = 115200;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: UART2_TX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   1: UART2_RX             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   2: UART2_RTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
         /*   3: UART2_CTS_b          = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End UART_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Pins used for Voltage Reference
 * @{
 */
#define USBDM_VREF_IS_DEFINED 
/**
 * Peripheral information for VREF, Voltage Reference
 */
class VrefInfo {
public:
   //! Hardware base pointer
   static constexpr volatile VREF_Type *vref   = (volatile VREF_Type *)VREF_BasePtr;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = DEFAULT_PCR;

   //! Clock mask for peripheral
   static constexpr uint32_t clockMask = SIM_SCGC4_VREF_MASK;

   //! Address of clock register for peripheral
   static constexpr volatile uint32_t *clockReg  = (volatile uint32_t *)(SIM_BasePtr+offsetof(SIM_Type,SCGC4));

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = 0;

   // Template:vref_c

   static constexpr uint8_t vref_trm = 
       VREF_TRM_CHOPEN(1) | // Chop oscillator enable
       VREF_TRM_TRIM(32);   // Trim bits 

   static constexpr uint8_t vref_sc = 
       VREF_SC_VREFEN(1) |   // Internal Voltage Reference enable
       VREF_SC_REGEN(1) |    // Regulator enable
       VREF_SC_ICOMPEN(1) |  // Second order curvature compensation enable
       VREF_SC_MODE_LV(1);   // Buffer Mode selection 

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PcrInfo  info[] = {

         //      Signal                 Pin                                 clockMask          pcrAddress      gpioAddress     bit  PCR value
         /*   0: VREF_OUT             = --                             */  { 0, 0, 0, UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End VREF_Group
 * @}
 */

} // End namespace USBDM


#include "adc.h"
#include "ftm.h"
#include "gpio.h"

namespace USBDM {

/**
 * Used to configure pin-mapping before 1st use of peripherals
 */
extern void mapAllPins();

} // End namespace USBDM

/**
 *
 * @mainpage Summary
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | -                                           | p10                       | -       
 *  ADC0_DP0                 | -                                           | p9                        | -       
 *  ADC1_DM0                 | -                                           | p12                       | -       
 *  ADC1_DP0                 | -                                           | p11                       | -       
 *  DAC0_OUT                 | -                                           | p18                       | -       
 *  DAC1_OUT                 | -                                           | p19                       | -       
 *  PTA0                     | -                                           | p22                       | -       
 *  PTA1                     | -                                           | p23                       | -       
 *  PTA2                     | -                                           | p24                       | -       
 *  PTA3                     | -                                           | p25                       | -       
 *  PTA4                     | -                                           | p26                       | -       
 *  PTA5                     | -                                           | p27                       | -       
 *  PTA12                    | -                                           | p28                       | -       
 *  PTA13                    | -                                           | p29                       | -       
 *  PTA18                    | -                                           | p32                       | -       
 *  PTA19                    | -                                           | p33                       | -       
 *  PTB0                     | -                                           | p35                       | -       
 *  PTB1                     | -                                           | p36                       | -       
 *  PTB2                     | -                                           | p37                       | -       
 *  PTB3                     | -                                           | p38                       | -       
 *  PTB16                    | -                                           | p39                       | -       
 *  PTB17                    | -                                           | p40                       | -       
 *  PTB18                    | -                                           | p41                       | -       
 *  PTB19                    | -                                           | p42                       | -       
 *  PTC0                     | -                                           | p43                       | -       
 *  PTC1                     | -                                           | p44                       | -       
 *  PTC2                     | -                                           | p45                       | -       
 *  PTC3                     | -                                           | p46                       | -       
 *  PTC4                     | -                                           | p49                       | -       
 *  PTC5                     | -                                           | p50                       | -       
 *  PTC6                     | -                                           | p51                       | -       
 *  PTC7                     | -                                           | p52                       | -       
 *  PTC8                     | -                                           | p53                       | -       
 *  PTC9                     | -                                           | p54                       | -       
 *  PTC10                    | -                                           | p55                       | -       
 *  PTC11                    | -                                           | p56                       | -       
 *  PTD0                     | -                                           | p57                       | -       
 *  PTD1                     | -                                           | p58                       | -       
 *  PTD2                     | -                                           | p59                       | -       
 *  PTD3                     | -                                           | p60                       | -       
 *  PTD4                     | -                                           | p61                       | -       
 *  PTD5                     | -                                           | p62                       | -       
 *  PTD6                     | -                                           | p63                       | -       
 *  PTD7                     | -                                           | p64                       | -       
 *  PTE0                     | -                                           | p1                        | -       
 *  PTE1                     | -                                           | p2                        | -       
 *  PTE16                    | -                                           | p5                        | -       
 *  PTE17                    | -                                           | p6                        | -       
 *  PTE18                    | -                                           | p7                        | -       
 *  PTE19                    | -                                           | p8                        | -       
 *  PTE24                    | -                                           | p20                       | -       
 *  PTE25                    | -                                           | p21                       | -       
 *  RESET_b                  | -                                           | p34                       | -       
 *  VDD1                     | -                                           | p3                        | -       
 *  VDD4                     | -                                           | p30                       | -       
 *  VDD6                     | -                                           | p48                       | -       
 *  VDDA                     | -                                           | p13                       | -       
 *  VREFH                    | -                                           | p14                       | -       
 *  VREFL                    | -                                           | p15                       | -       
 *  VREF_OUT                 | -                                           | p17                       | -       
 *  VSS1                     | -                                           | p4                        | -       
 *  VSS4                     | -                                           | p31                       | -       
 *  VSS6                     | -                                           | p47                       | -       
 *  VSSA                     | -                                           | p16                       | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTE0                     | -                                           | p1                        | -       
 *  PTE1                     | -                                           | p2                        | -       
 *  VDD1                     | -                                           | p3                        | -       
 *  VSS1                     | -                                           | p4                        | -       
 *  PTE16                    | -                                           | p5                        | -       
 *  PTE17                    | -                                           | p6                        | -       
 *  PTE18                    | -                                           | p7                        | -       
 *  PTE19                    | -                                           | p8                        | -       
 *  ADC0_DP0                 | -                                           | p9                        | -       
 *  ADC0_DM0                 | -                                           | p10                       | -       
 *  ADC1_DP0                 | -                                           | p11                       | -       
 *  ADC1_DM0                 | -                                           | p12                       | -       
 *  VDDA                     | -                                           | p13                       | -       
 *  VREFH                    | -                                           | p14                       | -       
 *  VREFL                    | -                                           | p15                       | -       
 *  VSSA                     | -                                           | p16                       | -       
 *  VREF_OUT                 | -                                           | p17                       | -       
 *  DAC0_OUT                 | -                                           | p18                       | -       
 *  DAC1_OUT                 | -                                           | p19                       | -       
 *  PTE24                    | -                                           | p20                       | -       
 *  PTE25                    | -                                           | p21                       | -       
 *  PTA0                     | -                                           | p22                       | -       
 *  PTA1                     | -                                           | p23                       | -       
 *  PTA2                     | -                                           | p24                       | -       
 *  PTA3                     | -                                           | p25                       | -       
 *  PTA4                     | -                                           | p26                       | -       
 *  PTA5                     | -                                           | p27                       | -       
 *  PTA12                    | -                                           | p28                       | -       
 *  PTA13                    | -                                           | p29                       | -       
 *  VDD4                     | -                                           | p30                       | -       
 *  VSS4                     | -                                           | p31                       | -       
 *  PTA18                    | -                                           | p32                       | -       
 *  PTA19                    | -                                           | p33                       | -       
 *  RESET_b                  | -                                           | p34                       | -       
 *  PTB0                     | -                                           | p35                       | -       
 *  PTB1                     | -                                           | p36                       | -       
 *  PTB2                     | -                                           | p37                       | -       
 *  PTB3                     | -                                           | p38                       | -       
 *  PTB16                    | -                                           | p39                       | -       
 *  PTB17                    | -                                           | p40                       | -       
 *  PTB18                    | -                                           | p41                       | -       
 *  PTB19                    | -                                           | p42                       | -       
 *  PTC0                     | -                                           | p43                       | -       
 *  PTC1                     | -                                           | p44                       | -       
 *  PTC2                     | -                                           | p45                       | -       
 *  PTC3                     | -                                           | p46                       | -       
 *  VSS6                     | -                                           | p47                       | -       
 *  VDD6                     | -                                           | p48                       | -       
 *  PTC4                     | -                                           | p49                       | -       
 *  PTC5                     | -                                           | p50                       | -       
 *  PTC6                     | -                                           | p51                       | -       
 *  PTC7                     | -                                           | p52                       | -       
 *  PTC8                     | -                                           | p53                       | -       
 *  PTC9                     | -                                           | p54                       | -       
 *  PTC10                    | -                                           | p55                       | -       
 *  PTC11                    | -                                           | p56                       | -       
 *  PTD0                     | -                                           | p57                       | -       
 *  PTD1                     | -                                           | p58                       | -       
 *  PTD2                     | -                                           | p59                       | -       
 *  PTD3                     | -                                           | p60                       | -       
 *  PTD4                     | -                                           | p61                       | -       
 *  PTD5                     | -                                           | p62                       | -       
 *  PTD6                     | -                                           | p63                       | -       
 *  PTD7                     | -                                           | p64                       | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  VSSA                     | -                                           | p16                       | -       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
