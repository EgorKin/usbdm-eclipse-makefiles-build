/*
        FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
        All rights reserved

        VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.

        This file is part of the FreeRTOS distribution.

        FreeRTOS is free software; you can redistribute it and/or modify it under
        the terms of the GNU General Public License (version 2) as published by the
        Free Software Foundation AND MODIFIED BY the FreeRTOS exception.

 ***************************************************************************
 **!   NOTE: The modification to the GPL is included to allow you to     !**
 **!   distribute a combined work that includes FreeRTOS without being   !**
 **!   obliged to provide the source code for proprietary components     !**
 **!   outside of the FreeRTOS kernel.                                   !**
 ***************************************************************************

        FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
        WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
        FOR A PARTICULAR PURPOSE.  Full license text is available on the following
        link: http://www.freertos.org/a00114.html

 ***************************************************************************
 *                                                                       *
 *    FreeRTOS provides completely free yet professionally developed,    *
 *    robust, strictly quality controlled, supported, and cross          *
 *    platform software that is more than just the market leader, it     *
 *    is the industry's de facto standard.                               *
 *                                                                       *
 *    Help yourself get started quickly while simultaneously helping     *
 *    to support the FreeRTOS project by purchasing a FreeRTOS           *
 *    tutorial book, reference manual, or both:                          *
 *    http://www.FreeRTOS.org/Documentation                              *
 *                                                                       *
 ***************************************************************************

        http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
        the FAQ page "My application does not run, what could be wrong?".  Have you
        defined configASSERT()?

        http://www.FreeRTOS.org/support - In return for receiving this top quality
        embedded software for free we request you assist our global community by
        participating in the support forum.

        http://www.FreeRTOS.org/training - Investing in training allows your team to
        be as productive as possible as early as possible.  Now you can receive
        FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
        Ltd, and the world's leading authority on the world's leading RTOS.

        http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
        including FreeRTOS+Trace - an indispensable productivity tool, a DOS
        compatible FAT file system, and our tiny thread aware UDP/IP stack.

        http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
        Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.

        http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
        Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
        licenses offer ticketed support, indemnification and commercial middleware.

        http://www.SafeRTOS.com - High Integrity Systems also provide a safety
        engineered and independently SIL3 certified version for use in safety and
        mission critical applications that require provable dependability.

        1 tab == 4 spaces!
 */

#ifndef FREERTOS_CONFIG_CFG
#define FREERTOS_CONFIG_CFG

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.
 *
 * See http://www.freertos.org/a00110.html.
 *----------------------------------------------------------*/


//-------- <<< Use Configuration Wizard in Context Menu >>> -----------------

// Obtain clock from System clock
#define configCPU_CLOCK_HZ (SystemCoreClock)

//   <o>RTOS Scheduler method
//     <0=> Co-operative
//     <1=> Pre-emptive
//   <i> Use preemptive or cooperative RTOS scheduler. 
#define configUSE_PREEMPTION     (1)

//   <q>Idle hook
//   <i> Enable Idle process hook function.
//   <i> The function has the signature "void vApplicationIdleHook()"
//   <i> This function is called during each cycle of the idle task. 
#define configUSE_IDLE_HOOK      (0)

//   <q>Tick hook
//   <i> Enable Tick hook function.
//   <i> The function has the signature "void vApplicationTickHook()"
//   <i> This function executes from within an ISR so must be very short, not use much stack, 
//   <i> and not call any API functions that don't end in "FromISR" or "FROM_ISR". 
#define configUSE_TICK_HOOK      (0)

//   <o>Tick Rate in Hz <1000-10000>
//   <i> The frequency of the RTOS tick interrupt. 
#define configTICK_RATE_HZ       ((TickType_t)1000)

//   <o>Maximum Priority Levels <1-31>
//   <i> The number of priorities available to the application tasks. 
//   <i> Any number of tasks can share the same priority. 
//   <i> Co-routines are prioritised separately - see configMAX_CO_ROUTINE_PRIORITIES.
//   <i> Each available priority consumes RAM within the RTOS kernel so shouldbe minimized
#define configMAX_PRIORITIES     (5)

//   <o>Minimum Thread stack size [bytes] <92-4096:4>
//   <i> The size of the stack used by the idle task. 
#define configMINIMAL_STACK_SIZE ((unsigned short)92)

//   <e>Support Dynamic memory allocation
#define configSUPPORT_DYNAMIC_ALLOCATION 1

//   <o>Total heap size [kibiBytes] <1-20>
//   <i> The total amount of RAM available in the FreeRTOS heap.
//   <i> This value will only be used if configSUPPORT_DYNAMIC_ALLOCATION is set to 1 and
//   <i> the application makes use of one of the sample memory allocation schemes provided.
//   <i> Default: 10K
#define configTOTAL_HEAP_SIZE    ((size_t)(10 * 1024))
//   </e>

//   <o>Maximum task name length <5-40>
//   <i> The maximum permissible length of the descriptive name given to a task when the task is created. 
//   <i> The length is specified in the number of characters including the NULL termination byte. 
//   <i> Default: 10
#define configMAX_TASK_NAME_LEN          (10)

//   <q>Use Trace facility
//   <i> Enable to include additional structure members and functions to assist with execution visualisation and tracing. 
#define configUSE_TRACE_FACILITY         (1)

//   <o>Timer tick size (TickType_t)
//   <i> Time is measured in 'ticks' - which is the number of times the tick interrupt has executed since the RTOS kernel was started. 
//   <i> The tick count is held in a variable of type TickType_t.
//   <i> This option selects the size of this type.
//   <i> Using a 16-bit type will greatly improve performance on 8 and 16 bit architectures, but limits 
//   <i> the maximum specifiable time period to 65535 'ticks'.  
//   <i> A 250Hz tick rate and 16-bit size would result in a maximum task delay or block of 262 seconds. 
//   <i> A 250Hz tick rate and 32-bit size would result in a maximum task delay or block of 17179869 seconds. 
//   <0=>unsigned 32bit type
//   <1=>unsigned 16bit type
#define configUSE_16_BIT_TICKS           (0)

//   <q>Configure whether the Idle Task should yield
//   <i> This only has effect if
//   <i> - The preemptive scheduler is being used.
//   <i> - The application creates tasks that run at the idle priority.
#define configIDLE_SHOULD_YIELD          (1)

//   <q>Allow Mutexs
//   <i> Enable Mutexs facility
#define configUSE_MUTEXES 		         (1)

//   <q>Allow Recursive Mutexs
//   <i> Enable Recursive Mutexs facility
#define configUSE_RECURSIVE_MUTEXES      (1)

//   <q>Allow Counting Mutexs
//   <i> Enable Counting Mutexs facility
#define configUSE_COUNTING_SEMAPHORES    (1)

//   <o>Queue registry size <0-20>
//   <i> The queue registry has two purposes, both of which are associated with RTOS kernel aware debugging:
//   <i> - It allows a textual name to be associated with a queue for easy queue identification within a debugging GUI.
//   <i> - It contains the information required by a debugger to locate each registered queue and semaphore.
//   <i> This should not be used unless using a RTOS aware debugger
#define configQUEUE_REGISTRY_SIZE        (0)

//   <q>Check for stack overflow
//   <i> Enable Stack overflow checks
//   <i> The function "vApplicationStackOverflowHook()" must be provided
#define configCHECK_FOR_STACK_OVERFLOW   (0)

//   <q>Allow Malloc failed hook
//   <i> Enable Malloc failed hook function.
//   <i> The function has the signature "void vApplicationMallocFailedHook()"
//   <i> This function is called if malloc() fails
#define configUSE_MALLOC_FAILED_HOOK     (0)

#define configUSE_APPLICATION_TASK_TAG   (0)

//   <q>Generate Run Time Stats
//   <i>FreeRTOS can optionally collect information on the amount of processing time that has been used by each task. 
//   <i>The vTaskGetRunTimeStats() API function can then be used to present this information in a tabular format, as shown on the right. 
#define configGENERATE_RUN_TIME_STATS    (0)

//   <q>Generate Time Slicing
//   <i>If enabled FreeRTOS uses prioritised preemptive scheduling with time slicing. 
//   <i>This means that the RTOS scheduler will always run the highest priority task that is in the Ready state, 
//   <i>and will switch between tasks of equal priority on every RTOS tick interrupt. 
//   <i>If disabled then the RTOS scheduler will still run the highest priority task that is in the Ready state, 
//   <i>but will not switch between tasks of equal priority just because a tick interrupt has occurred. 
#define configUSE_TIME_SLICING           (0)

#define INCLUDE_xTimerPendFunctionCall 	 (1)
#define INCLUDE_xEventGroupSetBitFromISR (1)

/* Co-routine definitions. */
//   <e>Allow use of co-routines
//   <i> Enable co-routines
#define configUSE_CO_ROUTINES            (1)

//   <o>Maximum co-routine Priority Levels <1-31>
//   <i>The number of priorities available to co-routines
#define configMAX_CO_ROUTINE_PRIORITIES  (2)
//   </e>

/* Software timer definitions. */
//   <e>Allow use of timers
//   <i> Enable timers
#define configUSE_TIMERS                  (1)

//   <o>Maximum timer Priority Levels <1-31>
//   <i>The number of priorities available to timers
#define configTIMER_TASK_PRIORITY         (2)

//   <o>Maximum timer queue length <1-31>
//   <i>Timer queue length
#define configTIMER_QUEUE_LENGTH          (10)

//   <o>Timer stack size [bytes] <64-4096:4>
//   <i> Default: 90
#define configTIMER_TASK_STACK_DEPTH      (180)
//   </e>

/* Set the following definitions to 1 to include the API function, or zero
to exclude the API function. */
#define INCLUDE_vTaskPrioritySet              (1)
#define INCLUDE_uxTaskPriorityGet             (1)
#define INCLUDE_vTaskDelete                   (1)
#define INCLUDE_vTaskCleanUpResources         (1)
#define INCLUDE_vTaskSuspend                  (1)
#define INCLUDE_vTaskDelayUntil               (1)
#define INCLUDE_vTaskDelay                    (1)
#define INCLUDE_uxTaskGetStackHighWaterMark   (1)
#define INCLUDE_xTaskGetSchedulerState        (1)

/* Cortex-M specific definitions. */
#ifdef __NVIC_PRIO_BITS
/* __BVIC_PRIO_BITS will be specified when CMSIS is being used. */
#define configPRIO_BITS __NVIC_PRIO_BITS
#else
#define configPRIO_BITS (4) /* 15 priority levels */
#endif

/* The lowest interrupt priority that can be used in a call to a "set priority" function. */
#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY (0xf)

/* The highest interrupt priority that can be used by any interrupt service
routine that makes calls to interrupt safe FreeRTOS API functions.  DO NOT CALL
INTERRUPT SAFE FREERTOS API FUNCTIONS FROM ANY INTERRUPT THAT HAS A HIGHER
PRIORITY THAN THIS! (higher priorities are lower numeric values. */
#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY (5)

/* Interrupt priorities used by the kernel port layer itself.  
 * These are generic to all Cortex-M ports, and do not rely on any particular library functions. 
 */
#define configKERNEL_INTERRUPT_PRIORITY (configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))
/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */

#define configMAX_SYSCALL_INTERRUPT_PRIORITY (configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))

/* Normal assert() semantics without relying on the provision of an assert.h header file. */
#define configASSERT(x)           \
	if ((x) == 0)                 \
	{                             \
		taskDISABLE_INTERRUPTS(); \
		for (;;)                  \
		;                         \
	}

/* Definitions that map the FreeRTOS port interrupt handlers to their CMSIS standard names. */
#define vPortSVCHandler      SVC_Handler
#define xPortPendSVHandler   PendSV_Handler
#define xPortSysTickHandler  SysTick_Handler

#endif /* FREERTOS_CONFIG_CFG */
