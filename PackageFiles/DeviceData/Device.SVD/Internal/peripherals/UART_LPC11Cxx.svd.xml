<!--
Devices using this peripheral: 
      LPC11Cxx
      LPC11xx
-->
      <peripheral>
         <?sourceFile "UART_LPC11Cxx" ?>
         <name>UART</name>
         <description>UART</description>
         <groupName>UART</groupName>
         <headerStructName>UART</headerStructName>
         <baseAddress>0x40008000</baseAddress>
         <size>32</size>
         <access>read-write</access>
         <resetValue>0x0</resetValue>
         <resetMask>0xFFFFFFFF</resetMask>
         <addressBlock>
            <offset>0x0</offset>
            <size>0x8</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x8</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0xC</offset>
            <size>0x18</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x28</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x30</offset>
            <size>0x4</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <offset>0x4C</offset>
            <size>0xC</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>DLL</name>
               <description>Divisor Latch LSB. Least significant byte of the baud rate divisor value. The full divisor is used to generate a baud rate from the fractional rate divider. (DLAB=1)</description>
               <addressOffset>0x0</addressOffset>
               <resetValue>0x1</resetValue>
               <fields>
                  <field>
                     <name>DLLSB</name>
                     <description>The UART Divisor Latch LSB Register, along with the DLM register, determines the baud rate of the UART</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RBR</name>
               <description>Receiver Buffer Register. Contains the next received character to be read. (DLAB=0)</description>
               <addressOffset>0x0</addressOffset>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>RBR</name>
                     <description>The UART Receiver Buffer Register contains the oldest received byte in the UART RX FIFO</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>THR</name>
               <description>Transmit Holding Register. The next character to be transmitted is written here. (DLAB=0)</description>
               <addressOffset>0x0</addressOffset>
               <access>write-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>THR</name>
                     <description>Writing to the UART Transmit Holding Register causes the data to be stored in the UART transmit FIFO. The byte will be sent when it reaches the bottom of the FIFO and the transmitter is available</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DLM</name>
               <description>Divisor Latch MSB. Most significant byte of the baud rate divisor value. The full divisor is used to generate a baud rate from the fractional rate divider. (DLAB=1)</description>
               <addressOffset>0x4</addressOffset>
               <fields>
                  <field>
                     <name>DLMSB</name>
                     <description>The UART Divisor Latch MSB Register, along with the DLL register, determines the baud rate of the UART</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>IER</name>
               <description>Interrupt Enable Register. Contains individual interrupt enable bits for the 7 potential UART interrupts. (DLAB=0)</description>
               <addressOffset>0x4</addressOffset>
               <fields>
                  <field>
                     <name>RBRIE</name>
                     <description>RBR Interrupt Enable. Enables the Receive Data Available interrupt for UART. It also controls the Character Receive Time-out interrupt</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_THE_RDA_INTE</name>
                           <description>Disable the RDA interrupt</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_THE_RDA_INTER</name>
                           <description>Enable the RDA interrupt</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>THREIE</name>
                     <description>THRE Interrupt Enable. Enables the THRE interrupt for UART. The status of this interrupt can be read from LSR[5]</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_THE_THRE_INT</name>
                           <description>Disable the THRE interrupt</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_THE_THRE_INTE</name>
                           <description>Enable the THRE interrupt</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXLIE</name>
                     <description>RX Line Interrupt Enable. Enables the UART RX line status interrupts. The status of this interrupt can be read from LSR[4:1]</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_THE_RX_LINE_</name>
                           <description>Disable the RX line status interrupts</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_THE_RX_LINE_S</name>
                           <description>Enable the RX line status interrupts</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ABEOINTEN</name>
                     <description>Enables the end of auto-baud interrupt</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_END_OF_AUTO_</name>
                           <description>Disable end of auto-baud Interrupt</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_END_OF_AUTO_B</name>
                           <description>Enable end of auto-baud Interrupt</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ABTOINTEN</name>
                     <description>Enables the auto-baud time-out interrupt</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_AUTO_BAUD_TI</name>
                           <description>Disable auto-baud time-out Interrupt</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_AUTO_BAUD_TIM</name>
                           <description>Enable auto-baud time-out Interrupt</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FCR</name>
               <description>FIFO Control Register. Controls UART FIFO usage and modes</description>
               <addressOffset>0x8</addressOffset>
               <access>write-only</access>
               <fields>
                  <field>
                     <name>FIFOEN</name>
                     <description>FIFO Enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLED</name>
                           <description>UART FIFOs are disabled. Must not be used in the application</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLED</name>
                           <description>Active high enable for both UART Rx and TX FIFOs and FCR[7:1] access. This bit must be set for proper UART operation. Any transition on this bit will automatically clear the UART FIFOs</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXFIFORES</name>
                     <description>RX FIFO Reset</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_IMPACT_ON_EITHER_</name>
                           <description>No impact on either of UART FIFOs</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>CLEAR</name>
                           <description>Writing a logic 1 to FCR[1] will clear all bytes in UART Rx FIFO, reset the pointer logic. This bit is self-clearing</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXFIFORES</name>
                     <description>TX FIFO Reset</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_IMPACT_ON_EITHER_</name>
                           <description>No impact on either of UART FIFOs</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>CLEAR</name>
                           <description>Writing a logic 1 to FCR[2] will clear all bytes in UART TX FIFO, reset the pointer logic. This bit is self-clearing</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXTL</name>
                     <description>RX Trigger Level. These two bits determine how many receiver UART FIFO characters must be written before an interrupt is activated</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>TRIGGER_LEVEL_0_1_C</name>
                           <description>Trigger level 0 (1 character or 0x01)</description>
                           <value>0x0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>TRIGGER_LEVEL_1_4_C</name>
                           <description>Trigger level 1 (4 characters or 0x04)</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>TRIGGER_LEVEL_2_8_C</name>
                           <description>Trigger level 2 (8 characters or 0x08)</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>TRIGGER_LEVEL_3_14_</name>
                           <description>Trigger level 3 (14 characters or 0x0E)</description>
                           <value>0x3</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>IIR</name>
               <description>Interrupt ID Register. Identifies which interrupt(s) are pending</description>
               <addressOffset>0x8</addressOffset>
               <access>read-only</access>
               <resetValue>0x1</resetValue>
               <fields>
                  <field>
                     <name>INTSTATUS</name>
                     <description>Interrupt status. Note that IIR[0] is active low. The pending interrupt can be determined by evaluating IIR[3:1]</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>PENDING</name>
                           <description>At least one interrupt is pending</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>NO_INTERRUPT_IS_PEND</name>
                           <description>No interrupt is pending</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>INTID</name>
                     <description>Interrupt identification. IER[3:1] identifies an interrupt corresponding to the UART Rx FIFO. All other combinations of IER[3:1] not listed below are reserved (100,101,111)</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>1_RECEIVE_LINE_S</name>
                           <description>1   - Receive Line Status (RLS)</description>
                           <value>0x3</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>2A__RECEIVE_DATA_AV</name>
                           <description>2a - Receive Data Available (RDA)</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>2B__CHARACTER_TIME_</name>
                           <description>2b - Character Time-out Indicator (CTI)</description>
                           <value>0x6</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>3_THRE_INTERRUPT</name>
                           <description>3   - THRE Interrupt</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>4_MODEM_INTERRUP</name>
                           <description>4   - Modem interrupt</description>
                           <value>0x0</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FIFOENABLE</name>
                     <description>These bits are equivalent to FCR[0]</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                  </field>
                  <field>
                     <name>ABEOINT</name>
                     <description>End of auto-baud interrupt. True if auto-baud has finished successfully and interrupt is enabled</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>ABTOINT</name>
                     <description>Auto-baud time-out interrupt. True if auto-baud has timed out and interrupt is enabled</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>LCR</name>
               <description>Line Control Register. Contains controls for frame formatting and break generation</description>
               <addressOffset>0xC</addressOffset>
               <fields>
                  <field>
                     <name>WLS</name>
                     <description>Word Length Select</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>5_BIT_CHARACTER_LENG</name>
                           <description>5-bit character length</description>
                           <value>0x0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>6_BIT_CHARACTER_LENG</name>
                           <description>6-bit character length</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>7_BIT_CHARACTER_LENG</name>
                           <description>7-bit character length</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>8_BIT_CHARACTER_LENG</name>
                           <description>8-bit character length</description>
                           <value>0x3</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SBS</name>
                     <description>Stop Bit Select</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>1_STOP_BIT_</name>
                           <description>1 stop bit</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>2_STOP_BITS</name>
                           <description>2 stop bits (1.5 if LCR[1:0]=00)</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PE</name>
                     <description>Parity Enable</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_PARITY_GENER</name>
                           <description>Disable parity generation and checking</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_PARITY_GENERA</name>
                           <description>Enable parity generation and checking</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PS</name>
                     <description>Parity Select</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>ODD_PARITY_NUMBER_O</name>
                           <description>Odd parity. Number of 1s in the transmitted character and the attached parity bit will be odd</description>
                           <value>0x0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EVEN_PARITY_NUMBER_</name>
                           <description>Even Parity. Number of 1s in the transmitted character and the attached parity bit will be even</description>
                           <value>0x1</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>FORCED_1_STICK_PARIT</name>
                           <description>Forced 1 stick parity</description>
                           <value>0x2</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>FORCED_0_STICK_PARIT</name>
                           <description>Forced 0 stick parity</description>
                           <value>0x3</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BC</name>
                     <description>Break Control</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_BREAK_TRANSM</name>
                           <description>Disable break transmission</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_BREAK_TRANSMI</name>
                           <description>Enable break transmission. Output pin UART TXD is forced to logic 0 when LCR[6] is active high</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DLAB</name>
                     <description>Divisor Latch Access Bit</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_ACCESS_TO_DI</name>
                           <description>Disable access to Divisor Latches</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_ACCESS_TO_DIV</name>
                           <description>Enable access to Divisor Latches</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>MCR</name>
               <description>Modem control register</description>
               <addressOffset>0x10</addressOffset>
               <fields>
                  <field>
                     <name>DTRC</name>
                     <description>DTR Control. Source for modem output pin, DTR. This bit reads as 0 when modem loopback mode is active</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTSC</name>
                     <description>RTS Control. Source for modem output pin RTS. This bit reads as 0 when modem loopback mode is active</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>LMS</name>
                     <description>Loopback Mode Select. The modem loopback mode provides a mechanism to perform diagnostic loopback testing. Serial data from the transmitter is connected internally to serial input of the receiver. Input pin, RXD, has no effect on loopback and output pin, TXD is held in marking state. The four modem inputs (CTS, DSR, RI and  DCD) are disconnected externally. Externally, the modem outputs (RTS, DTR) are set inactive. Internally, the four modem outputs are connected to the four modem inputs. As a result of these connections, the upper four bits of the MSR will be driven by the lower four bits of the MCR rather than the four modem inputs in normal mode. This permits modem status interrupts to be generated in loopback mode by writing the lower four bits of MCR</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RTSEN</name>
                     <description>RTS flow control</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_AUTO_RTS_FLO</name>
                           <description>Disable auto-rts flow control</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_AUTO_RTS_FLOW</name>
                           <description>Enable auto-rts flow control</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CTSEN</name>
                     <description>CTS flow control</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_AUTO_CTS_FLO</name>
                           <description>Disable auto-cts flow control</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_AUTO_CTS_FLOW</name>
                           <description>Enable auto-cts flow control</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>LSR</name>
               <description>Line Status Register. Contains flags for transmit and receive status, including line errors</description>
               <addressOffset>0x14</addressOffset>
               <access>read-only</access>
               <resetValue>0x60</resetValue>
               <fields>
                  <field>
                     <name>RDR</name>
                     <description>Receiver Data Ready. LSR[0] is set when the RBR holds an unread character and is cleared when the UART RBR FIFO is empty</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>EMPTY_</name>
                           <description>RBR is empty</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>VALID</name>
                           <description>RBR contains valid data</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>OE</name>
                     <description>Overrun Error. The overrun error condition is set as soon as it occurs. A LSR read clears LSR[1]. LSR[1] is set when UART RSR has a new character assembled and the UART RBR FIFO is full. In this case, the UART RBR FIFO will not be overwritten and the character in the UART RSR will be lost</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>INACTIVE</name>
                           <description>Overrun error status is inactive</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ACTIVE</name>
                           <description>Overrun error status is active</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PE</name>
                     <description>Parity Error. When the parity bit of a received character is in the wrong state, a parity error occurs. A LSR read clears LSR[2]. Time of parity error detection is dependent on FCR[0]. Note: A parity error is associated with the character at the top of the UART RBR FIFO</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>INACTIVE</name>
                           <description>Parity error status is inactive</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ACTIVE</name>
                           <description>Parity error status is active</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FE</name>
                     <description>Framing Error. When the stop bit of a received character is a logic 0, a framing error occurs. A LSR read clears LSR[3]. The time of the framing error detection is dependent on FCR0. Upon detection of a framing error, the RX will attempt to re-synchronize to the data and assume that the bad stop bit is actually an early start bit. However, it cannot be assumed that the next received byte will be correct even if there is no Framing Error. Note: A framing error is associated with the character at the top of the UART RBR FIFO</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>INACTIVE</name>
                           <description>Framing error status is inactive</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ACTIVE</name>
                           <description>Framing error status is active</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BI</name>
                     <description>Break Interrupt. When RXD1 is held in the spacing state (all zeros) for one full character transmission (start, data, parity, stop), a break interrupt occurs. Once the break condition has been detected, the receiver goes idle until RXD1 goes to marking state (all ones). A LSR read clears this status bit. The time of break detection is dependent on FCR[0]. Note: The break interrupt is associated with the character at the top of the UART RBR FIFO</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>INACTIVE</name>
                           <description>Break interrupt status is inactive</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ACTIVE</name>
                           <description>Break interrupt status is active</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>THRE</name>
                     <description>Transmitter Holding Register Empty. THRE is set immediately upon detection of an empty UART THR and is cleared on a THR write</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>VALID</name>
                           <description>THR contains valid data</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EMPTY_</name>
                           <description>THR is empty</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TEMT</name>
                     <description>Transmitter Empty. TEMT is set when both THR and TSR are empty; TEMT is cleared when either the TSR or the THR contain valid data</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>VALID</name>
                           <description>THR and/or the TSR contains valid data</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>EMPTY_</name>
                           <description>THR and the TSR are empty</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXFE</name>
                     <description>Error in RX FIFO. LSR[7] is set when a character with a RX error such as framing error, parity error or break interrupt, is loaded into the RBR. This bit is cleared when the LSR register is read and there are no subsequent errors in the UART FIFO</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NOERROR</name>
                           <description>RBR contains no UART RX errors or FCR[0]=0</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ERROR</name>
                           <description>UART RBR contains at least one UART RX error</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>MSR</name>
               <description>Modem status register</description>
               <addressOffset>0x18</addressOffset>
               <access>read-only</access>
               <fields>
                  <field>
                     <name>DCTS</name>
                     <description>Delta CTS. Set upon state change of input CTS. Cleared on a MSR read</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_CHANGE_DETECTED_O</name>
                           <description>No change detected on modem input CTS</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>STATE_CHANGE_DETECTE</name>
                           <description>State change detected on modem input CTS</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DDSR</name>
                     <description>Delta DSR. Set upon state change of input DSR. Cleared on a MSR read</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_CHANGE_DETECTED_O</name>
                           <description>No change detected on modem input DSR</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>STATE_CHANGE_DETECTE</name>
                           <description>State change detected on modem input DSR</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TERI</name>
                     <description>Trailing Edge RI. Set upon low to high transition of input RI. Cleared on a MSR read</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_CHANGE_DETECTED_O</name>
                           <description>No change detected on modem input, RI</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>LOW_TO_HIGH_TRANSITI</name>
                           <description>Low-to-high transition detected on RI</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DDCD</name>
                     <description>Delta DCD. Set upon state change of input DCD. Cleared on a MSR read</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_CHANGE_DETECTED_O</name>
                           <description>No change detected on modem input DCD</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>STATE_CHANGE_DETECTE</name>
                           <description>State change detected on modem input DCD</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CTS</name>
                     <description>Clear To Send State. Complement of input signal CTS. This bit is connected to MCR[1] in modem loopback mode</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DSR</name>
                     <description>Data Set Ready State. Complement of input signal DSR. This bit is connected to MCR[0] in modem loopback mode</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>RI</name>
                     <description>Ring Indicator State. Complement of input RI. This bit is connected to MCR[2] in modem loopback mode</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>DCD</name>
                     <description>Data Carrier Detect State. Complement of input DCD. This bit is connected to MCR[3] in modem loopback mode</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>SCR</name>
               <description>Scratch Pad Register. Eight-bit temporary storage for software</description>
               <addressOffset>0x1C</addressOffset>
               <fields>
                  <field>
                     <name>pad</name>
                     <description>A readable, writable byte</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>ACR</name>
               <description>Auto-baud Control Register. Contains controls for the auto-baud feature</description>
               <addressOffset>0x20</addressOffset>
               <fields>
                  <field>
                     <name>START</name>
                     <description>Start bit. This bit is automatically cleared after auto-baud completion</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>STOP</name>
                           <description>Auto-baud stop (auto-baud is not running)</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>START</name>
                           <description>Auto-baud start (auto-baud is running). Auto-baud run bit. This bit is automatically cleared after auto-baud completion</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MODE</name>
                     <description>Auto-baud mode select</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>MODE_0_</name>
                           <description>Mode 0</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>MODE_1_</name>
                           <description>Mode 1</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>AUTORESTART</name>
                     <description>Restart enable</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NO_RESTART</name>
                           <description>No restart</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>RESTART_IN_CASE_OF_T</name>
                           <description>Restart in case of time-out (counter restarts at next UART Rx falling edge)</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ABEOINTCLR</name>
                     <description>End of auto-baud interrupt clear (write only accessible)</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>NOIMPACT</name>
                           <description>Writing a 0 has no impact</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>CLEAR</name>
                           <description>Writing a 1 will clear the corresponding interrupt in the IIR</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field derivedFrom="ABEOINTCLR" > <name>ABTOINTCLR</name> <description>Auto-baud time-out interrupt clear (write only accessible)</description> <bitOffset>9</bitOffset> </field>
               </fields>
            </register>
            <register>
               <name>FDR</name>
               <description>Fractional Divider Register. Generates a clock input for the baud rate divider</description>
               <addressOffset>0x28</addressOffset>
               <resetValue>0x10</resetValue>
               <fields>
                  <field>
                     <name>DIVADDVAL</name>
                     <description>Baud rate generation pre-scaler divisor value. If this field is 0, fractional baud rate generator will not impact the UART baud rate</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
                  <field>
                     <name>MULVAL</name>
                     <description>Baud rate pre-scaler multiplier value. This field must be greater or equal 1 for UART to operate properly, regardless of whether the fractional baud rate generator is used or not</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>4</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>TER</name>
               <description>Transmit Enable Register. Turns off UART transmitter for use with software flow control</description>
               <addressOffset>0x30</addressOffset>
               <resetValue>0x80</resetValue>
               <fields>
                  <field>
                     <name>TXEN</name>
                     <description>When this bit is 1, as it is after a Reset, data written to the THR is output on the TXD pin as soon as any preceding data has been sent. If this bit cleared to 0 while a character is being sent, the transmission of that character is completed, but no further characters are sent until this bit is set again. In other words, a 0 in this bit blocks the transfer of characters from the THR or TX FIFO into the transmit shift register. Software can clear this bit when it detects that the a hardware-handshaking TX-permit signal (CTS) has gone false, or with software handshaking, when it receives an XOFF character (DC3). Software can set this bit again when it detects that the TX-permit signal has gone true, or when it receives an XON (DC1) character</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RS485CTRL</name>
               <description>RS-485/EIA-485 Control. Contains controls to configure various aspects of RS-485/EIA-485 modes</description>
               <addressOffset>0x4C</addressOffset>
               <fields>
                  <field>
                     <name>NMMEN</name>
                     <description>NMM enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLED</name>
                           <description>RS-485/EIA-485 Normal Multidrop Mode (NMM) is disabled</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLED</name>
                           <description>RS-485/EIA-485 Normal Multidrop Mode (NMM) is enabled. In this mode, an address is detected when a received byte causes the UART to set the parity error and generate an interrupt</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXDIS</name>
                     <description>Receiver enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>ENABLED</name>
                           <description>The receiver is enabled</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DISABLED</name>
                           <description>The receiver is disabled</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>AADEN</name>
                     <description>AAD enable</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLED</name>
                           <description>Auto Address Detect (AAD) is disabled</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLED</name>
                           <description>Auto Address Detect (AAD) is enabled</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SEL</name>
                     <description>Select direction control pin</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>RTS</name>
                           <description>If direction control is enabled (bit DCTRL = 1), pin RTS is used for direction control</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>DTR</name>
                           <description>If direction control is enabled (bit DCTRL = 1), pin DTR is used for direction control</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DCTRL</name>
                     <description>Auto direction control enable</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>DISABLE_AUTO_DIRECTI</name>
                           <description>Disable Auto Direction Control</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>ENABLE_AUTO_DIRECTIO</name>
                           <description>Enable Auto Direction Control</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>OINV</name>
                     <description>Polarity control. This bit reverses the polarity of the direction control signal on the RTS (or DTR) pin</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>LOW</name>
                           <description>The direction control pin will be driven to logic 0 when the transmitter has data to be sent. It will be driven to logic 1 after the last bit of data has been transmitted</description>
                           <value>0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>HIGH</name>
                           <description>The direction control pin will be driven to logic 1 when the transmitter has data to be sent. It will be driven to logic 0 after the last bit of data has been transmitted</description>
                           <value>1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>RS485ADRMATCH</name>
               <description>RS-485/EIA-485 address match. Contains the address match value for RS-485/EIA-485 mode</description>
               <addressOffset>0x50</addressOffset>
               <fields>
                  <field>
                     <name>ADRMATCH</name>
                     <description>Contains the address match value</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>RS485DLY</name>
               <description>RS-485/EIA-485 direction control delay</description>
               <addressOffset>0x54</addressOffset>
               <fields>
                  <field>
                     <name>DLY</name>
                     <description>Contains the direction control (RTS or DTR) delay value. This register works in conjunction with an 8-bit counter</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
